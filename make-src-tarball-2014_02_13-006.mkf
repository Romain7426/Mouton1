#!/opt/local/bin/gmake -r -R -S -j 1 --warn-undefined-variables -f 
SHELL:= /bin/sh
.SHELLFLAGS: -u -e  
.SUFFIXES: 
.SILENT:
.NOTPARALLEL:
.EXPORT_ALL_VARIABLES:
.SECONDARY:
.PRECIOUS:
.ONESHELL:

SVN_REVISION := $(shell svn-revision.sh)
#GIT_REVISION := $(shell git-revision.sh)
#DATE := $(shell date "+%Y-%m-%d--%H-%M-%S")

PROJECT_NAME := $(shell dir-name.sh $$PWD)
PROJECT_NAME_UPPER := $(shell toupper $(PROJECT_NAME))

SYSTEME := $(shell uname)
ENDIAN := $(shell endianness-detect)
ARCH := $(shell arch)
MACHINE := $(shell machine)
HARDWARE := $(shell uname -m)


.PHONY: default
default: 
default: COPYING_at_start_of_c_files $(PROJECT_NAME)-src-tarball-$(SVN_REVISION) $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).tar.gz $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img.gz 


.PHONY: clean
clean:
	rm -Rf COPYING_at_start_of_c_files $(PROJECT_NAME)-src-tarball-$(SVN_REVISION) $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).tar.gz $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img.gz 


UNAME_LIST := FreeBSD NetBSD OpenBSD Darwin Linux MINGW32_NT-6.1 MINGW32_NT-5.1 windows DOS
OS_LIST := freebsd netbsd openbsd macosx linux windows windows windows dos
ifneq ($(words $(UNAME_LIST)),$(words $(OS_LIST)))
  $(error XXX)
endif
UNAME_IDX := $(shell tools/bin/list-match $(SYSTEME) $(UNAME_LIST) $(SYSTEME))
OS := $(word $(UNAME_IDX), $(OS_LIST) unknown_os)

HW_LIST := i386 amd64 x86_64 i686 386 8086
INTSIZE_LIST := 32 64 64 32 32 16
ifneq ($(words $(HW_LIST)),$(words $(INTSIZE_LIST)))
  $(error XXX)
endif
HW_IDX := $(shell tools/bin/list-match $(HARDWARE) $(HW_LIST) $(HARDWARE))
INTSIZE := $(word $(HW_IDX), $(INTSIZE_LIST) unknown_intsize)

$(info OS $(OS))
$(info INTSIZE $(INTSIZE))



.PHONY: COPYING_at_start_of_c_files
COPYING_at_start_of_c_files:
	COPYING_at_start_of_c_files.sh COPYING 

.PHONY: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)
$(PROJECT_NAME)-src-tarball-$(SVN_REVISION): COPYING_at_start_of_c_files
	rm -Rf $(PROJECT_NAME)-src-tarball-$(SVN_REVISION) 2>&1
	mkdir -p $(PROJECT_NAME)-src-tarball-$(SVN_REVISION) 2>&1
	mkdir -p $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/src  2>&1
	cp -fp src/*.c $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/src/  2>&1
	cp -fp src/*.h $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/src/ 2>&1
#	cp -fp src/*.i $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/src/ 2>&1
	cp -fp src/*.ct $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/src/ 2>&1
	cp -fp src/*.y $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/src/ 2>&1
	mkdir -p $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/tools
	mkdir -p $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/tools/src
	cp -fp tools/src/*.c $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/tools/src/
	for file_i in `lrec $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)`; do \
	  cp -fp COPYING_at_start_of_c_files tmp ; \
	  echo "" >> tmp ; \
	  cat $$file_i >> tmp ; \
	  mv -f tmp $$file_i ; \
	done
#	  echo "COPYING for $(file_i)"; 
	cp -fp COPYING $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/
#	cp -fp configure $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/
#	cp -fp Makefile-gen.mkf $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/
	cp -fp configure-for-tarball $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)/configure




.PHONY: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).tar.gz
$(PROJECT_NAME)-src-tarball-$(SVN_REVISION).tar.gz: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)
	rm -f $@
	tar cf $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).tar $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)
	gzip $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).tar 


.PHONY: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img
$(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img-$(OS)

.PHONY: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img.gz
$(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img.gz: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img
	rm -f $@
	gzip $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img


.PHONY: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img-macosx
$(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img-macosx: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)
	rm -f src-tarball-$(SVN_REVISION).img  2>&1
	$(foreach img_size_in_k,$(shell expr `du -sk src-tarball-$(SVN_REVISION) | sed -e 's/s.*//'` "*" "120" "/" "10"), \
	  hdiutil create -size $(img_size_in_k)k  -layout MBRSPUD -fs MS-DOS -volname "$(PROJECT_NAME_UPPER)" $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)  2>&1 ; \
	)
	mv $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).dmg $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img  2>&1
#	hdiutil mount src-tarball-$(SVN_REVISION).img
	mkdir -p mountpoint  2>&1
	hdiutil mount -mountpoint ./mountpoint $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img  2>&1
#	rsync --progress -ha src-tarball-$(SVN_REVISION) /Volumes/$(PROJECT_NAME)/
#	rsync -ha src-tarball-$(SVN_REVISION) /Volumes/$(PROJECT_NAME_UPPER)/
	rsync -ha $(PROJECT_NAME)-src-tarball-$(SVN_REVISION) mountpoint/  2>&1
#	hdiutil unmount /Volumes/$(PROJECT_NAME_UPPER)
	hdiutil eject ./mountpoint   2>&1
#	hdiutil detach src-tarball-$(SVN_REVISION).img 


.PHONY: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img-openbsd
$(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img-openbsd: $(PROJECT_NAME)-src-tarball-$(SVN_REVISION)
	rm -f $@
	$(foreach img_size_in_k,$(shell expr `du -sk $(PROJECT_NAME)-src-tarball-$(SVN_REVISION) | sed -e 's/s.*//'` "*" "12" "/" "10"), \
	  dd if=/dev/zero of=myhdd0.img bs=1024 count=$(img_size_in_k); \
	)
	sudo vnconfig svnd0 myhdd0.img 
	sudo fdisk -i -y svnd0
	printf "e 3\n0C\nn\n\n\nw\nq\n" | sudo fdisk -e svnd0
	sudo newfs_msdos -L "$(PROJECT_NAME_UPPER)" svnd0i
	mkdir mnt0
	sudo mount_msdos /dev/svnd0i mnt0
	rsync --progress -ha $(PROJECT_NAME)-src-tarball-$(SVN_REVISION) mnt0/
	sudo umount mnt0
	rmdir mnt0
	sudo vnconfig -u svnd0
	mv -f myhdd0.img $(PROJECT_NAME)-src-tarball-$(SVN_REVISION).img




