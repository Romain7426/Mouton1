//"#ifndef $_LISTE_H\n"
//"#define $_LISTE_H\n"
"\n"
"#ifndef STRUCT_$_LISTE_T\n"
"#define STRUCT_$_LISTE_T\n"
"struct @_liste_t {\n"
"  struct @_liste_t * cdr;\n"
"  @_t * car;\n"
"};\n"
"#endif\n"
"#ifndef $_LISTE_T\n"
"#define $_LISTE_T\n"
"#ifndef __cplusplus\n"
"typedef struct @_liste_t @_liste_t;\n"
"#endif\n"
"#endif\n"
"\n"
"\n"
"extern @_liste_t * @_liste_vide(void);\n"
"extern int @_liste_vide_huh(const @_liste_t * l);\n"
"extern @_liste_t * @_liste_cons(const @_t * a, const @_liste_t * l);\n"
"extern @_liste_t * @_liste_cons_nocopy(@_t * a, @_liste_t * l);\n"
"\n"
"extern void @_liste_free(@_liste_t * l);\n"
"extern void @_liste_free_nocopy(@_liste_t * l);\n"
"\n"
"extern @_liste_t * @_liste_copy(const @_liste_t * l);\n"
"extern int @_liste_longueur(const @_liste_t * l);\n"
"\n"
"extern char * @_liste_string(const @_liste_t * l);\n"
"\n"
"#if 0\n"
"extern @_liste_t * @_liste_list(int n, ...);\n"
"extern @_liste_t * @_liste_vlist(int n, va_list args); \n"
"#endif\n"
"\n"
"extern int @_liste_equal(const @_liste_t * liste1, const @_liste_t * liste2); \n"
"\n"
"extern @_liste_t * @_liste_reverse(const @_liste_t * l);\n"
"\n"
"extern void @_liste_reverse_surplace(@_liste_t * * liste); \n"
"\n"
"extern @_liste_t * @_liste_append(const @_liste_t * l, const @_liste_t * m);\n"
"extern void @_liste_append_nocopy(@_liste_t * * l, @_liste_t * m);\n"
"\n"
"\n"
"extern int @_liste_member(const @_t * a, const @_liste_t * liste);\n"
"\n"
"extern int @_liste_member_iteratif(const @_t * a, const @_liste_t * liste);\n"
"\n"
"extern @_t * @_liste_pop(@_liste_t * * l);\n"
"\n"
"\n"
"extern @_liste_t * @_liste_map(@_t * (* f)(const @_t *), const @_liste_t * l);\n"
"\n"
"extern @_t * @_liste_fold(@_t * (* f)(const @_t *, const @_t *), const @_t * a, const @_liste_t * l);\n"
"\n"
"\n"
"extern int @_liste_count(const @_t * a, const @_liste_t * l);\n"
"\n"
"\n"
//"#endif /* $_LISTE_H */\n"
""

